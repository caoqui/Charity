{"version":3,"file":"charity.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/promise.js","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, encode, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageReadRaw(encode(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWriteRaw(encode(storageKey), storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, str, bytes, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = str(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageReadRaw(bytes(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemoveRaw(bytes(lastKey)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemoveRaw(bytes(key));\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, encode, decode, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this._keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this._keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this._keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this._keys.push(key);\n            this.values.set(key, [decode(serialized), newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [decode(serialized), oldIndex]);\n        return getValueWithOptions(encode(oldValue), options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this._keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this._keys.isEmpty() && index !== this._keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this._keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(encode(value), options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this._keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this._keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map._keys = new Vector(`${data.prefix}u`);\n        map._keys.length = data._keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n    keys({ start, limit }) {\n        const ret = [];\n        if (start === undefined) {\n            start = 0;\n        }\n        if (limit == undefined) {\n            limit = this.length - start;\n        }\n        for (let i = start; i < start + limit; i++) {\n            ret.push(this._keys.get(i));\n        }\n        return ret;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap._keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [\n                key.value,\n                getValueWithOptions(encode(valueAndIndex[0]), this.options),\n            ],\n        };\n    }\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import { assert } from \"./utils\";\nimport * as near from \"./api\";\n/**\n * A promise action which can be executed on the NEAR blockchain.\n */\nexport class PromiseAction {\n}\n/**\n * A create account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class CreateAccount extends PromiseAction {\n    add(promiseIndex) {\n        near.promiseBatchActionCreateAccount(promiseIndex);\n    }\n}\n/**\n * A deploy contract promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeployContract extends PromiseAction {\n    /**\n     * @param code - The code of the contract to be deployed.\n     */\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeployContract(promiseIndex, this.code);\n    }\n}\n/**\n * A function call promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCall extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCall(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call weight promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeight extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeight(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A function call weight raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeightRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeightRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A transfer promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Transfer extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    constructor(amount) {\n        super();\n        this.amount = amount;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionTransfer(promiseIndex, this.amount);\n    }\n}\n/**\n * A stake promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Stake extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    constructor(amount, publicKey) {\n        super();\n        this.amount = amount;\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionStake(promiseIndex, this.amount, this.publicKey.data);\n    }\n}\n/**\n * A add full access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddFullAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFullAccess(promiseIndex, this.publicKey.data, this.nonce);\n    }\n}\n/**\n * A add access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, allowance, receiverId, functionNames, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.allowance = allowance;\n        this.receiverId = receiverId;\n        this.functionNames = functionNames;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFunctionCall(promiseIndex, this.publicKey.data, this.nonce, this.allowance, this.receiverId, this.functionNames);\n    }\n}\n/**\n * A delete key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to delete from the account.\n     */\n    constructor(publicKey) {\n        super();\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteKey(promiseIndex, this.publicKey.data);\n    }\n}\n/**\n * A delete account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteAccount extends PromiseAction {\n    /**\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    constructor(beneficiaryId) {\n        super();\n        this.beneficiaryId = beneficiaryId;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteAccount(promiseIndex, this.beneficiaryId);\n    }\n}\nclass PromiseSingle {\n    constructor(accountId, actions, after, promiseIndex) {\n        this.accountId = accountId;\n        this.actions = actions;\n        this.after = after;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const promiseIndex = this.after\n            ? near.promiseBatchThen(this.after.constructRecursively(), this.accountId)\n            : near.promiseBatchCreate(this.accountId);\n        this.actions.forEach((action) => action.add(promiseIndex));\n        this.promiseIndex = promiseIndex;\n        return promiseIndex;\n    }\n}\nexport class PromiseJoint {\n    constructor(promiseA, promiseB, promiseIndex) {\n        this.promiseA = promiseA;\n        this.promiseB = promiseB;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const result = near.promiseAnd(this.promiseA.constructRecursively(), this.promiseB.constructRecursively());\n        this.promiseIndex = result;\n        return result;\n    }\n}\n/**\n * A high level class to construct and work with NEAR promises.\n */\nexport class NearPromise {\n    /**\n     * @param subtype - The subtype of the promise.\n     * @param shouldReturn - Whether the promise should return.\n     */\n    constructor(subtype, shouldReturn) {\n        this.subtype = subtype;\n        this.shouldReturn = shouldReturn;\n    }\n    /**\n     * Creates a new promise to the provided account ID.\n     *\n     * @param accountId - The account ID on which to call the promise.\n     */\n    static new(accountId) {\n        const subtype = new PromiseSingle(accountId, [], null, null);\n        return new NearPromise(subtype, false);\n    }\n    addAction(action) {\n        if (this.subtype instanceof PromiseJoint) {\n            throw new Error(\"Cannot add action to a joint promise.\");\n        }\n        this.subtype.actions.push(action);\n        return this;\n    }\n    /**\n     * Creates a create account promise action and adds it to the current promise.\n     */\n    createAccount() {\n        return this.addAction(new CreateAccount());\n    }\n    /**\n     * Creates a deploy contract promise action and adds it to the current promise.\n     *\n     * @param code - The code of the contract to be deployed.\n     */\n    deployContract(code) {\n        return this.addAction(new DeployContract(code));\n    }\n    /**\n     * Creates a function call promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCall(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCall(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCallRaw(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCallRaw(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call weight promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeight(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeight(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a function call weight raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeightRaw(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeightRaw(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a transfer promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    transfer(amount) {\n        return this.addAction(new Transfer(amount));\n    }\n    /**\n     * Creates a stake promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    stake(amount, publicKey) {\n        return this.addAction(new Stake(amount, publicKey));\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     */\n    addFullAccessKey(publicKey) {\n        return this.addFullAccessKeyWithNonce(publicKey, 0n);\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    addFullAccessKeyWithNonce(publicKey, nonce) {\n        return this.addAction(new AddFullAccessKey(publicKey, nonce));\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     */\n    addAccessKey(publicKey, allowance, receiverId, functionNames) {\n        return this.addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, 0n);\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, nonce) {\n        return this.addAction(new AddAccessKey(publicKey, allowance, receiverId, functionNames, nonce));\n    }\n    /**\n     * Creates a delete key promise action and adds it to the current promise.\n     *\n     * @param publicKey - The public key to delete from the account.\n     */\n    deleteKey(publicKey) {\n        return this.addAction(new DeleteKey(publicKey));\n    }\n    /**\n     * Creates a delete account promise action and adds it to the current promise.\n     *\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    deleteAccount(beneficiaryId) {\n        return this.addAction(new DeleteAccount(beneficiaryId));\n    }\n    /**\n     * Joins the provided promise with the current promise, making the current promise a joint promise subtype.\n     *\n     * @param other - The promise to join with the current promise.\n     */\n    and(other) {\n        const subtype = new PromiseJoint(this, other, null);\n        return new NearPromise(subtype, false);\n    }\n    /**\n     * Adds a callback to the current promise.\n     *\n     * @param other - The promise to be executed as the promise.\n     */\n    then(other) {\n        assert(other.subtype instanceof PromiseSingle, \"Cannot callback joint promise.\");\n        assert(other.subtype.after === null, \"Cannot callback promise which is already scheduled after another\");\n        other.subtype.after = this;\n        return other;\n    }\n    /**\n     * Sets the shouldReturn field to true.\n     */\n    asReturn() {\n        this.shouldReturn = true;\n        return this;\n    }\n    /**\n     * Recursively goes through the current promise to get the promise index.\n     */\n    constructRecursively() {\n        const result = this.subtype.constructRecursively();\n        if (this.shouldReturn) {\n            near.promiseReturn(result);\n        }\n        return result;\n    }\n    /**\n     * Called by NearBindgen, when return object is a NearPromise instance.\n     */\n    onReturn() {\n        this.asReturn().constructRecursively();\n    }\n}\n","import { NearBindgen, near, call, view, initialize, UnorderedMap, NearPromise, ONE_NEAR } from 'near-sdk-js';\nimport { AccountId } from 'near-sdk-js/lib/types'\n\n\n@NearBindgen({})\nclass charity {\n  listPhilanthropist: any;\n  listRegister: any;\n\n  constructor() {\n    this.listPhilanthropist = new UnorderedMap(\"a\");\n    this.listRegister = new UnorderedMap(\"b\");\n  }\n\n  @initialize({})\n  init() {\n    this.listPhilanthropist = new UnorderedMap(\"a\");\n    this.listRegister = new UnorderedMap(\"b\");\n  }\n\n  @view({})\n  viewListPhilanthropist() {\n    let listRs = \"\";\n    for (let phi of this.listPhilanthropist) {\n      listRs = listRs + phi + \" \";\n    }\n    return listRs;\n  }\n\n\n  @view({ privateFunction: true })\n  viewListRegister() {\n    let listRs = \"\";\n\n    for (let reg of this.listRegister) {\n      listRs = listRs + reg + \" \";\n    }\n\n    return listRs;\n  }\n\n\n  @call({ privateFunction: true })\n  addPhilanthropist({ philanthropist }: { philanthropist: string }) {\n    try {\n      if (!this.listPhilanthropist.get(philanthropist)) {\n        this.listPhilanthropist.set(philanthropist, \"0\");\n        this.listRegister.remove(philanthropist);\n      } else {\n        near.log(\"This account existed.\");\n      }\n    } catch (error) {\n      near.log(\"Create philanthropist failure.\");\n    }\n  }\n\n  @call({ payableFunction: true })\n  addRegister() {\n    try {\n      if (!this.listRegister.get(near.signerAccountId())) {\n        this.listRegister.set(near.signerAccountId(), true)\n        near.log(\"register successfully!\")\n      } else {\n        near.log(\"The account existed in list.\")\n      }\n    } catch (error) {\n      near.log(\"Cant add this register\")\n    }\n  }\n\n  @call({ payableFunction: true })\n  contributePrice({ idPhilanthropist }: { idPhilanthropist: string }) {\n    const amount: bigint = near.attachedDeposit();\n    if (amount > BigInt(0)) {\n      const newAmount: bigint = BigInt(this.listPhilanthropist.get(idPhilanthropist)) + amount\n      this.listPhilanthropist.set(idPhilanthropist, String(newAmount));\n      near.log(near.signerAccountId(), \" contributed to \", idPhilanthropist, amount);\n    }\n  }\n\n  @call({ privateFunction: true })\n  removeRegister({ idRegister }) {\n    if (!this.listRegister.get(idRegister)) return;\n    this.listRegister.remove(idRegister);\n    near.log(\"Removed register \", idRegister, \"sccessfully!\");\n  }\n\n  @call({ privateFunction: true })\n  acceptRegister({ idRegister }) {\n    if (!this.listRegister.get(idRegister)) return;\n    this.listRegister.remove(idRegister);\n    if (this.listPhilanthropist.get(idRegister) != \"0\") {\n      this.listPhilanthropist.set(idRegister, \"0\")\n    }\n    near.log(\"Accepted\", idRegister, \"sccessfully!\");\n  }\n\n\n  @call({})\n  reedemOne() {\n      if (!this.listPhilanthropist.get(near.signerAccountId())) return;\n      else {\n        const value = this.listPhilanthropist.get(near.signerAccountId());\n        const reedemAmount: bigint = BigInt(value);\n        \n        this.listPhilanthropist.remove(near.signerAccountId());\n        near.log(\"Reedem successfully!.\")\n\n        return NearPromise.new(near.signerAccountId()).transfer(reedemAmount);\n      }\n  }\n}"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","assert","expression","message","Error","getValueWithOptions","value","options","deserializer","deserialize","defaultValue","deserialized","undefined","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","encode","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","log","params","reduce","accumulated","parameter","index","param","stringified","signerAccountId","signer_account_id","read_register","predecessorAccountId","predecessor_account_id","currentAccountId","current_account_id","attachedDeposit","attached_deposit","storageReadRaw","returnValue","storage_read","storageHasKeyRaw","storage_has_key","storageHasKey","storageGetEvictedRaw","storageWriteRaw","storage_write","storageRemoveRaw","storage_remove","storageRemove","inputRaw","input","promiseAnd","promiseIndexes","promise_and","promiseBatchCreate","accountId","promise_batch_create","promiseBatchThen","promiseIndex","promise_batch_then","promiseBatchActionCreateAccount","promise_batch_action_create_account","promiseBatchActionDeployContract","code","promise_batch_action_deploy_contract","promiseBatchActionFunctionCallRaw","methodName","args","amount","gas","promise_batch_action_function_call","promiseBatchActionFunctionCall","promiseBatchActionTransfer","promise_batch_action_transfer","promiseBatchActionStake","publicKey","promise_batch_action_stake","promiseBatchActionAddKeyWithFullAccess","nonce","promise_batch_action_add_key_with_full_access","promiseBatchActionAddKeyWithFunctionCall","allowance","receiverId","methodNames","promise_batch_action_add_key_with_function_call","promiseBatchActionDeleteKey","promise_batch_action_delete_key","promiseBatchActionDeleteAccount","beneficiaryId","promise_batch_action_delete_account","promiseBatchActionFunctionCallWeightRaw","weight","promise_batch_action_function_call_weight","promiseBatchActionFunctionCallWeight","promiseReturn","promise_return","LookupMap","constructor","keyPrefix","containsKey","storageKey","near","get","remove","set","newValue","storageValue","extend","keyValuePairs","reconstruct","data","indexToKey","prefix","Uint32Array","array","Uint8Array","buffer","Vector","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","done","UnorderedMap","_keys","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","map","start","limit","ret","i","unorderedMap","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","apply","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","_requireInit","PromiseAction","CreateAccount","add","DeployContract","FunctionCall","functionName","FunctionCallRaw","FunctionCallWeight","FunctionCallWeightRaw","Transfer","Stake","AddFullAccessKey","AddAccessKey","functionNames","DeleteKey","DeleteAccount","PromiseSingle","actions","after","constructRecursively","forEach","action","PromiseJoint","promiseA","promiseB","result","NearPromise","subtype","shouldReturn","new","addAction","createAccount","deployContract","functionCall","functionCallRaw","functionCallWeight","functionCallWeightRaw","transfer","stake","addFullAccessKey","addFullAccessKeyWithNonce","addAccessKey","addAccessKeyWithNonce","deleteKey","deleteAccount","and","other","then","asReturn","onReturn","charity","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_class","_class2","listPhilanthropist","listRegister","init","viewListPhilanthropist","listRs","phi","viewListRegister","reg","addPhilanthropist","philanthropist","error","addRegister","contributePrice","idPhilanthropist","newAmount","String","removeRegister","idRegister","acceptRegister","reedemOne","reedemAmount","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","name","value_return"],"mappings":"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"}